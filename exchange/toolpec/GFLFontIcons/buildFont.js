const { exec } = require("child_process");
const fs = require("fs");
const util = require('util');

const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);
const rename = util.promisify(fs.rename);


/*
 	Reads the map from scss file and create a .js file
	used as config for fantasticon
*/
Promise.all([
	readFile('../../scss/gfl_iconfont_fa_override.scss', 'utf8'),
	readFile("./fantasticonrc.js", 'utf8')
])
	.then(([overrrideScssContent, fantasticonrcJSContent]) => {

		let codepointsMap = overrrideScssContent.split("// FANTASTICON_CONFIG")[1];
		codepointsMap = codepointsMap.replace('$glfFontGlyphs: (', '');
		codepointsMap = codepointsMap.replace(');', '');

		let newfantasticonrcJSContent = fantasticonrcJSContent.split("// TO_BE_REPLACED");

		const replaceString = `// TO_BE_REPLACED
${codepointsMap}
// TO_BE_REPLACED`;

		newfantasticonrcJSContent.splice(1, 1, replaceString);
		newfantasticonrcJSContent = newfantasticonrcJSContent.join("");

		return writeFile("./fantasticonrc.js", newfantasticonrcJSContent);
	})
	.catch(err => {
		throw err;
	})
	.then(() => {

		// Generates webfont
		exec("fantasticon", (error, stdout, stderr) => {
			if (error) {
				console.log(`error: ${error.message}`);
				return;
			}
			if (stderr) {
				console.log(`stderr: ${stderr}`);
				return;
			}
			console.log(`stdout: ${stdout}`);

			// Reads css generated by Fantasticon
			readFile('./GFLFontIcon.css', 'utf8')
				.then(data => {

					// Edits css content
					let newData = `
/* --------------------------------------------------
	⚠️ AUTO-GENERATED FILE, DO NOT EDIT ⚠️
	More info here: /cliens_theme/static/src/fonts/GFLFontIcons/readme.md
-------------------------------------------------- */
`;

					newData += data.replace(/\.\/GFLFontIcon\./g, "../fonts/GFLFontIcons/GFLFontIcon.");
					newData = newData.replace('i[class^="gfl-"]:before, i[class*=" gfl-"]:before {', 'i[class^="gfl-"]:before, i[class*=" gfl-"]:before, .gflicon {');

					// Write the new .scss file in this folder (moved later)
					return writeFile('gfl_iconfont.scss', newData);
				})
				.catch(err => {
					throw err;
				})
				.then(err => {
					// Overrides .scss file in cliens_theme module
					return rename('gfl_iconfont.scss', '../../scss/gfl_iconfont.scss');
				})
				.catch(err => {
					throw err;
				})
				.finally(() => {
					console.log("Completed!");
				})
			;
		});
	})
;




